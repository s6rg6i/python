"""Создать вручную список, содержащий цены на товары (10–20 товаров), например:
[57.8, 46.51, 97, ...]

A. Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде <r> руб <kk> коп
(например «5 руб 04 коп»). Если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).
B. Вывести цены, отсортированные по возрастанию, новый список не создавать
(доказать, что объект списка после сортировки остался тот же).
C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.
D. Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по возрастанию, написав минимум кода?
"""
price = [57.8, 46.51, 97, 32.99, 44.3, 77.29, 38.8, 1.01, 7, 88.08, 99.99, 1.01, 88.8, 28, 33, 55, 9.01, 7.99, 8]
rub = 0
kop = 0
s = ''

# 2.A. Вывод в виде  <r> руб <kk> коп»
for val in price:
    rub = int(val)  # рубли
    kop = int(((val - rub) + 0.005) * 100)  # копейки с округлением от 0 до 99
    s += f'{rub} руб {kop:02d} коп, '
    # print(f'{rub} руб {kop:02d} коп')
print(f'2.A. исходный список: {price}')
print(f'Строка с ценами: {s}')

# 2.B. сортировка по возрастанию с проверкой, что объект списка не изменился
temp = id(price)
price.sort()
print(f'2.B. сортированный по возрастанию список:{price}')
s = f'id списка до и после сортировки совпадают {temp}' if temp == id(price) else 'id списков не совпадают'
print(s)

# 2.C. новый список, отсортированные по убыванию
price1 = price[:]
price1.sort(reverse=True)
print(f'2.C. сортированный по убыванию список:{price1}')

# 2.D. цены пяти самых дорогих товаров
print(f'2.D. цены пяти самых дорогих товаров:{price[-5:]}')
# print(price[-5:])
