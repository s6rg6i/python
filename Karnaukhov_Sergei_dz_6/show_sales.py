# 6.6. Реализовать простую систему хранения данных о суммах продаж булочной. Должно быть два скрипта
# с интерфейсом командной строки: для записи данных и для вывода на экран записанных данных.
# При записи передавать из командной строки значение суммы продаж.
# Для чтения данных реализовать в командной строке следующую логику:
# просто запуск скрипта — выводить все записи;
# запуск скрипта с одним параметром - числом — выводить все записи с номера, равного этому числу, до конца;
# запуск скрипта с двумя числами — выводить записи, начиная с номера, равного первому числу,
#   по номер, равный второму числу, включительно.
# Подумать, как избежать чтения всего файла при реализации второго и третьего случаев.
# Данные хранить в файле bakery.csv в кодировке utf-8. Нумерация записей начинается с 1. Примеры запуска скриптов:
# python add_sale.py 5978,5          python show_sales.py     python show_sales.py 1 3     python show_sales.py 3
# python add_sale.py 8914,3          5978,5                   5978,5                       7879,1
# python add_sale.py 7879,1          8914,3                   8914,3                       1573,7
# python add_sale.py 1573,7          7879,1                   7879,1
#                                    1573,7

import sys

if len(sys.argv) > 3:
    print('Необходимо не более 2 параметров: <номер> начальный, <номер> конечный')
    exit(1)
end, beg = '0', '1'
end = sys.argv[2] if len(sys.argv) == 3 else '0'
beg = sys.argv[1] if len(sys.argv) >= 2 else '1'
if not (end.isnumeric() and beg.isnumeric()):
    print('Параметры должны быть целыми числами')
    exit(1)
idx_0, idx_1 = int(beg)-1, int(end)-1

with open('bakery.csv', encoding='utf-8') as file:
    for i, s in enumerate(file):
        if i >= idx_0 and (idx_1 == -1 or i <= idx_1):  # -1 - до конца файла
            print(s.strip())
pass

